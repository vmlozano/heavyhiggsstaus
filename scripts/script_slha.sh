#!/bin/bash

thepath=$PWD
file=1.dat

#Script designed to translate slha to param_card
#
#Parameters to be taken from the slha that are needed for the param_card:
# BLOCK HMIX, BLOCK MASS, BLOCK MSD2, BLOCK DSQMIX, BLOCK USQMIX, BLOCK MSE2, BLOCK MSL2, BLOCK MSQ2, BLOCK MSU2, BLOCK NMIX, BLOCK SELMIX, BLOCK SNUMIX, BLOCK TD, BLOCK TE, BLOCK TU, BLOCK UMIX, BLOCK VMIX, BLOCK MSOFT, DECAY WIDTHS
#

###
## Header of the param_card
##

echo "######################################################################"
echo "## PARAM_CARD  GENERATED BY SCRIPT_SLHA_PARAM_CARD                ####"
echo "######################################################################"

##
## IMPORTANT SM BLOCKS: alpha_em, alpha_s, U_PMNS, V_CKM, Yukawas
##

echo "###################################"
echo "## INFORMATION FOR SMINPUTS        "
echo "###################################"
echo "BLOCK SMINPUTS #                   "
echo "      1 1.279340e+02 # aewm1       "
echo "      2 1.16637000E-05  # G_mu [GeV^-2]"
echo "      3 1.180000e-01 # as          "
echo "      4 9.11887000E+01  # m_Z(pole)"
echo "      5 4.18000000E+00  # m_b(m_b), MSbar"
echo "      6 1.73500000E+02  # m_t(pole)"
echo "      7 1.77669000E+00  # m_tau(pole)"

echo "###################################"
echo "## INFORMATION FOR UPMNS           "
echo "###################################"
echo "BLOCK UPMNS #                      "
echo "      1 1 1.000000e+00 # rmns1x1   "
echo "      2 2 1.000000e+00 # rmns2x2   "
echo "      3 3 1.000000e+00 # rmns3x3   "
                                       
echo "###################################"
echo "## INFORMATION FOR VCKM            " 
echo "###################################"
echo "BLOCK VCKM #                       "
echo "      1 1 1.000000e+00 # rckm1x1   "
echo "      2 2 1.000000e+00 # rckm2x2   "
echo "      3 3 1.000000e+00 # rckm3x3   "
                                        
echo "###################################"
echo "## INFORMATION FOR YD              "
echo "###################################"
echo "BLOCK YD #                         "
echo "  1  1     3.72243423E-04   # Real(Yd(1,1),dp)"
echo "  1  2     0.00000000E+00   # Real(Yd(1,2),dp)"
echo "  1  3     0.00000000E+00   # Real(Yd(1,3),dp)"
echo "  2  1     0.00000000E+00   # Real(Yd(2,1),dp)"
echo "  2  2     7.05978903E-03   # Real(Yd(2,2),dp)"
echo "  2  3     0.00000000E+00   # Real(Yd(2,3),dp)"
echo "  3  1     0.00000000E+00   # Real(Yd(3,1),dp)"
echo "  3  2     0.00000000E+00   # Real(Yd(3,2),dp)"
echo "  3  3     3.65825421E-01   # Real(Yd(3,3),dp)"
echo "###################################"
echo "## INFORMATION FOR YE              "
echo "###################################"
echo "BLOCK YE #                         "
echo "  1  1     7.33403972E-05   # Real(Ye(1,1),dp)"
echo "  1  2     0.00000000E+00   # Real(Ye(1,2),dp)"
echo "  1  3     0.00000000E+00   # Real(Ye(1,3),dp)"
echo "  2  1     0.00000000E+00   # Real(Ye(2,1),dp)"
echo "  2  2     1.55010815E-02   # Real(Ye(2,2),dp)"
echo "  2  3     0.00000000E+00   # Real(Ye(2,3),dp)"
echo "  3  1     0.00000000E+00   # Real(Ye(3,1),dp)"
echo "  3  2     0.00000000E+00   # Real(Ye(3,2),dp)"
echo "  3  3     2.63518388E-01   # Real(Ye(3,3),dp)"
echo "###################################"
echo "## INFORMATION FOR YU              "
echo "###################################"
echo "BLOCK YU #                         "
echo "  1  1     6.12706855E-06   # Real(Yu(1,1),dp)"
echo "  1  2     1.41718798E-06   # Real(Yu(1,2),dp)"
echo "  1  3     2.15393315E-08   # Real(Yu(1,3),dp)"
echo "  2  1    -6.90578913E-04   # Real(Yu(2,1),dp)"
echo "  2  2     2.98372925E-03   # Real(Yu(2,2),dp)"
echo "  2  3     1.26238789E-04   # Real(Yu(2,3),dp)"
echo "  3  1     5.14688947E-03   # Real(Yu(3,1),dp)"
echo "  3  2    -3.53948307E-02   # Real(Yu(3,2),dp)"
echo "  3  3     8.64733621E-01   # Real(Yu(3,3),dp)"

##
## BLOCK EWSB: HMIX y FRALPHA
## For the fralpha block we need the mixing angle between the Higgses
## For the HMIX block the param_card needs mu, tanb and ma2 while 
## in slha provided by SPheno one gets usually mu, tanb, b,
## mHu2 and mHd2.
## In order to have ma2 we apply the relation:
## ma2=2b/sin(2b)=b(1+tanbeta^2)/tanbeta
##

mu="`awk -v i=50 -v j=2 'FNR == i {print $j}' $file`"
tb="`awk -v i=32 -v j=2 'FNR == i {print $j}' $file`"
bmu="`awk -v i=51 -v j=2 'FNR == i {print $j}' $file`"
fralpha="`awk -v i=56 -v j=2 'FNR == i {print $j}' $file`"
bmu="`echo "$bmu" | awk {' printf "%12.8f\n",$1 '}`" 
tanb="`echo "$tb" | awk {' printf "%12.8f\n",$1 '}`" 
ma2=$(echo "$bmu*(1+$tanb*$tanb)/$tanb" | bc -l)
ma2="`echo "$ma2" | awk {' printf "%12.8e\n",$1 '}`" 

echo "###################################"
echo "## INFORMATION FOR FRALPHA"
echo "###################################"
echo "#BLOCK FRALPHA # "
echo "      1 $fralpha # alp"
echo "###################################"
echo "## INFORMATION FOR HMIX"
echo "###################################"
echo "#BLOCK HMIX # "
echo "      1 $mu # mu"
echo "      2 $tb # tb"
echo "      4 $ma2 # ma2"

##
## BLOCK MSOFT
##

mhd2="`awk -v i=58 -v j=2 'FNR == i {print $j}' $file`"
mhu2="`awk -v i=59 -v j=2 'FNR == i {print $j}' $file`"
m1="`awk -v i=60 -v j=2 'FNR == i {print $j}' $file`"
m2="`awk -v i=61 -v j=2 'FNR == i {print $j}' $file`"
m3="`awk -v i=62 -v j=2 'FNR == i {print $j}' $file`"

echo "###################################"
echo "## INFORMATION FOR MSOFT"
echo "###################################"
echo "BLOCK MSOFT # "
echo "      1  $m1 # rmx1"
echo "      2  $m2 # rmx2"
echo "      3  $m3 # rmx3"
echo "      21 $mhd2 # mhd2"
echo "      22 $mhu2 # mhu2"

##
## BLOCK TRILINEAR COUPLINGS: TD, TE, TU
##

rtd11="`awk -v i=102 -v j=3 'FNR == i {print $j}' $file`"
rtd12="`awk -v i=103 -v j=3 'FNR == i {print $j}' $file`"
rtd13="`awk -v i=104 -v j=3 'FNR == i {print $j}' $file`"
rtd21="`awk -v i=105 -v j=3 'FNR == i {print $j}' $file`"
rtd22="`awk -v i=106 -v j=3 'FNR == i {print $j}' $file`"
rtd23="`awk -v i=107 -v j=3 'FNR == i {print $j}' $file`"
rtd31="`awk -v i=108 -v j=3 'FNR == i {print $j}' $file`"
rtd32="`awk -v i=109 -v j=3 'FNR == i {print $j}' $file`"
rtd33="`awk -v i=110 -v j=3 'FNR == i {print $j}' $file`"

echo "###################################"
echo "## INFORMATION FOR TD"
echo "###################################"
echo "BLOCK TD # "
echo "      1 1 $rtd11 # rtd1x1"
echo "      1 2 $rtd12 # rtd1x2"
echo "      1 3 $rtd13 # rtd1x3"
echo "      2 1 $rtd21 # rtd2x1"
echo "      2 2 $rtd22 # rtd2x2"
echo "      2 3 $rtd23 # rtd2x3"
echo "      3 1 $rtd31 # rtd3x1"
echo "      3 2 $rtd32 # rtd3x2"
echo "      3 3 $rtd33 # rtd3x3"

rte11="`awk -v i=112 -v j=3 'FNR == i {print $j}' $file`"
rte12="`awk -v i=113 -v j=3 'FNR == i {print $j}' $file`"
rte13="`awk -v i=114 -v j=3 'FNR == i {print $j}' $file`"
rte21="`awk -v i=115 -v j=3 'FNR == i {print $j}' $file`"
rte22="`awk -v i=116 -v j=3 'FNR == i {print $j}' $file`"
rte23="`awk -v i=117 -v j=3 'FNR == i {print $j}' $file`"
rte31="`awk -v i=118 -v j=3 'FNR == i {print $j}' $file`"
rte32="`awk -v i=119 -v j=3 'FNR == i {print $j}' $file`"
rte33="`awk -v i=120 -v j=3 'FNR == i {print $j}' $file`"

echo "###################################"
echo "## INFORMATION FOR TE"
echo "###################################"
echo "BLOCK TE # "
echo "      1 1 $rte11 # rte1x1"
echo "      1 2 $rte12 # rte1x2"
echo "      1 3 $rte13 # rte1x3"
echo "      2 1 $rte21 # rte2x1"
echo "      2 2 $rte22 # rte2x2"
echo "      2 3 $rte23 # rte2x3"
echo "      3 1 $rte31 # rte3x1"
echo "      3 2 $rte32 # rte3x2"
echo "      3 3 $rte33 # rte3x3"

rtu11="`awk -v i=122 -v j=3 'FNR == i {print $j}' $file`"
rtu12="`awk -v i=123 -v j=3 'FNR == i {print $j}' $file`"
rtu13="`awk -v i=124 -v j=3 'FNR == i {print $j}' $file`"
rtu21="`awk -v i=125 -v j=3 'FNR == i {print $j}' $file`"
rtu22="`awk -v i=126 -v j=3 'FNR == i {print $j}' $file`"
rtu23="`awk -v i=127 -v j=3 'FNR == i {print $j}' $file`"
rtu31="`awk -v i=128 -v j=3 'FNR == i {print $j}' $file`"
rtu32="`awk -v i=129 -v j=3 'FNR == i {print $j}' $file`"
rtu33="`awk -v i=130 -v j=3 'FNR == i {print $j}' $file`"

echo "###################################"
echo "## INFORMATION FOR TU"
echo "###################################"
echo "BLOCK TU # "
echo "      1 1 $rtu11 # rtu1x1"
echo "      1 2 $rtu12 # rtu1x2"
echo "      1 3 $rtu13 # rtu1x3"
echo "      2 1 $rtu21 # rtu2x1"
echo "      2 2 $rtu22 # rtu2x2"
echo "      2 3 $rtu23 # rtu2x3"
echo "      3 1 $rtu31 # rtu3x1"
echo "      3 2 $rtu32 # rtu3x2"
echo "      3 3 $rtu33 # rtu3x3"

##
## BLOCK SOFT MASSES: MSQ2, MSL2, MSD2, MSU2, MSE2
## IMPORTANT INFO: The whole soft mass matrix are only taken
## into account in the mssm_slha2_full model of mg5. In the 
## common mssm_slha2 the entries 1x1 and 2x2 are considered 
## equal and the value chosen is 1x1. No mixing is considered
## for 1st and 2nd generation.
## Here we also consider no ixj entries with i=/=j
## 

rmq211="`awk -v i=132 -v j=3 'FNR == i {print $j}' $file`"
rmq222="`awk -v i=136 -v j=3 'FNR == i {print $j}' $file`"
rmq233="`awk -v i=140 -v j=3 'FNR == i {print $j}' $file`"

echo "###################################"
echo "## INFORMATION FOR MSQ2"
echo "###################################"
echo "BLOCK MSQ2 # "
echo "      1 1 $rmq211 # set of param :1*rmq21x1, 1*rmq22x2"
echo "      2 2 $rmq222 # mg5 will not use this value use instead 1*mdl_rmq21x1"
echo "      3 3 $rmq233 # rmq23x3"

rml211="`awk -v i=142 -v j=3 'FNR == i {print $j}' $file`"
rml222="`awk -v i=146 -v j=3 'FNR == i {print $j}' $file`"
rml233="`awk -v i=150 -v j=3 'FNR == i {print $j}' $file`"

echo "###################################"
echo "## INFORMATION FOR MSL2"
echo "###################################"
echo "BLOCK MSL2 # "
echo "      1 1 $rml211 # set of param :1*rml21x1, 1*rml22x2"
echo "      2 2 $rml222 # mg5 will not use this value use instead 1*mdl_rml21x1"
echo "      3 3 $rml233 # rml23x3"

rmd211="`awk -v i=152 -v j=3 'FNR == i {print $j}' $file`"
rmd222="`awk -v i=156 -v j=3 'FNR == i {print $j}' $file`"
rmd233="`awk -v i=160 -v j=3 'FNR == i {print $j}' $file`"

echo "###################################"
echo "## INFORMATION FOR MSD2"
echo "###################################"
echo "BLOCK MSD2 # "
echo "      1 1 $rmd211 # set of param :1*rmd21x1, 1*rmd22x2"
echo "      2 2 $rmd222 # mg5 will not use this value use instead 1*mdl_rmd21x1"
echo "      3 3 $rmd233 # rmd23x3"

rmu211="`awk -v i=162 -v j=3 'FNR == i {print $j}' $file`"
rmu222="`awk -v i=166 -v j=3 'FNR == i {print $j}' $file`"
rmu233="`awk -v i=170 -v j=3 'FNR == i {print $j}' $file`"

echo "###################################"
echo "## INFORMATION FOR MSU2"
echo "###################################"
echo "BLOCK MSU2 # "
echo "      1 1 $rmu211 # set of param :1*rmu21x1, 1*rmu22x2"
echo "      2 2 $rmu222 # mg5 will not use this value use instead 1*mdl_rmu21x1"
echo "      3 3 $rmu233 # rmu23x3"

rme211="`awk -v i=172 -v j=3 'FNR == i {print $j}' $file`"
rme222="`awk -v i=176 -v j=3 'FNR == i {print $j}' $file`"
rme233="`awk -v i=180 -v j=3 'FNR == i {print $j}' $file`"

echo "###################################"
echo "## INFORMATION FOR MSE2"
echo "###################################"
echo "BLOCK MSE2 # "
echo "      1 1 $rme211 # set of param :1*rme21x1, 1*rme22x2"
echo "      2 2 $rme222 # mg5 will not use this value use instead 1*mdl_rme21x1"
echo "      3 3 $rme233 # rme23x3"

##
## BLOCK PHYSICAL MASSES OF THE PARTICLES
## IMPORTANT INFO: As mssm_slha2 considers equal values for the entries 1x1 and 2x2
## of the soft breaking masses, then here the particles corresponding to those masses
## should be equal. If one works with mssm_slha2_full, then one should change the 
## script accordingly to take into account the different masses.
##

msd_1="`awk -v i=183 -v j=2 'FNR == i {print $j}' $file`"
msd_2="`awk -v i=184 -v j=2 'FNR == i {print $j}' $file`"
msd_3="`awk -v i=185 -v j=2 'FNR == i {print $j}' $file`"
msd_4="`awk -v i=186 -v j=2 'FNR == i {print $j}' $file`"
msd_5="`awk -v i=187 -v j=2 'FNR == i {print $j}' $file`"
msd_6="`awk -v i=188 -v j=2 'FNR == i {print $j}' $file`"
msu_1="`awk -v i=189 -v j=2 'FNR == i {print $j}' $file`"
msu_2="`awk -v i=190 -v j=2 'FNR == i {print $j}' $file`"
msu_3="`awk -v i=191 -v j=2 'FNR == i {print $j}' $file`"
msu_4="`awk -v i=192 -v j=2 'FNR == i {print $j}' $file`"
msu_5="`awk -v i=193 -v j=2 'FNR == i {print $j}' $file`"
msu_6="`awk -v i=194 -v j=2 'FNR == i {print $j}' $file`"
mse_1="`awk -v i=195 -v j=2 'FNR == i {print $j}' $file`"
mse_2="`awk -v i=196 -v j=2 'FNR == i {print $j}' $file`"
mse_3="`awk -v i=197 -v j=2 'FNR == i {print $j}' $file`"
mse_4="`awk -v i=198 -v j=2 'FNR == i {print $j}' $file`"
mse_5="`awk -v i=199 -v j=2 'FNR == i {print $j}' $file`"
mse_6="`awk -v i=200 -v j=2 'FNR == i {print $j}' $file`"
msv_1="`awk -v i=201 -v j=2 'FNR == i {print $j}' $file`"
msv_2="`awk -v i=202 -v j=2 'FNR == i {print $j}' $file`"
msv_3="`awk -v i=203 -v j=2 'FNR == i {print $j}' $file`"
mhh_1="`awk -v i=204 -v j=2 'FNR == i {print $j}' $file`"
mhh_2="`awk -v i=205 -v j=2 'FNR == i {print $j}' $file`"
mah_2="`awk -v i=206 -v j=2 'FNR == i {print $j}' $file`"
mhpm_2="`awk -v i=207 -v j=2 'FNR == i {print $j}' $file`"
mgluino="`awk -v i=219 -v j=2 'FNR == i {print $j}' $file`"
mchi_1="`awk -v i=220 -v j=2 'FNR == i {print $j}' $file`"
mchi_2="`awk -v i=221 -v j=2 'FNR == i {print $j}' $file`"
mchi_3="`awk -v i=222 -v j=2 'FNR == i {print $j}' $file`"
mchi_4="`awk -v i=223 -v j=2 'FNR == i {print $j}' $file`"
mcha_1="`awk -v i=224 -v j=2 'FNR == i {print $j}' $file`"
mcha_2="`awk -v i=225 -v j=2 'FNR == i {print $j}' $file`"


echo "###################################"
echo "## INFORMATION FOR MASS"
echo "###################################"
echo "BLOCK MASS # "
echo "      1000001 $msd_1 # sd_1"
echo "      1000003 $msd_1 # sd_2 must be identical to [1000001]"
echo "      1000005 $msd_3 # sd_3"
echo "      2000001 $msd_4 # sd_4"
echo "      2000003 $msd_4 # sd_5 must be identical to [2000001]"
echo "      2000005 $msd_6 # sd_6"
echo "      1000002 $msu_1 # su_1"
echo "      1000004 $msu_1 # su_2 must be identical to [1000002]"
echo "      1000006 $msu_3 # su_3"
echo "      2000002 $msu_4 # su_4"
echo "      2000004 $msu_4 # su_5 must be identical to [2000002]"
echo "      2000006 $msu_6 # su_6"
echo "      1000011 $mse_1 # se_1"
echo "      1000013 $mse_2 # se_2 must be identical to [1000011]"
echo "      1000015 $msd_3 # se_3"
echo "      2000011 $msd_4 # se_4"
echo "      2000013 $msd_4 # se_5 must be identical to [2000011]"
echo "      2000015 $msd_6 # se_6"
echo "      1000012 $msv_1 # sv_1"
echo "      1000014 $msv_1 # sv_2 must be identical to [1000012]"
echo "      1000016 $msd_3 # sv_3"
echo "      25 $mhh_1 # hh_1"
echo "      35 $mhh_2 # hh_2"
echo "      36 $mah_2 # ah_2"
echo "      37 $mhpm_2 # hpm_2"
echo "      23 9.118870e+01 # vz"
echo "      24 8.034973e+01 # vwm"
echo "      1 5.00000000E-03 # fd_1"
echo "      3 9.50000000E-02 # fd_2"
echo "      5 4.180000e+00 # fd_3"
echo "      2 2.50000000E-03 # fu_1"
echo "      4 1.27000000E+00 # fu_2"
echo "      6 1.735000e+02 # fu_3"
echo "      11 5.10998930E-04 # fe_1"
echo "      13 1.05658372E-01 # fe_2"
echo "      15 1.776690e+00 # fe_3"
echo "      1000021 $mgluino # glu"
echo "      1000022 $mchi_1 # chi_1"
echo "      1000023 $mchi_2 # chi_2"
echo "      1000025 $mchi_3 # chi_3"
echo "      1000035 $mchi_4 # chi_4"
echo "      1000024 $mcha_1 # cha_1"
echo "      1000037 $mcha_2 # cha_2"
echo "      12 0.000000e+00 # ve : 0.0"
echo "      14 0.000000e+00 # vm : 0.0"
echo "      16 0.000000e+00 # vt : 0.0"
echo "      21 0.000000e+00 # g : 0.0"
echo "      22 0.000000e+00 # a : 0.0"

#echo ""

####
#### BLOCKS FROM PARAM_CARD
####

#BLOCS TO DO:

#DSQMIX
#NMIX
#SELMIX
#SNUMIX
#UMIX
#USQMIX
#VMIX
#DECAY
#QNUMBERS

#BLOCS ALREADY DONE:

#SMINPUTS
#UPMNS
#VCKM
#YD
#YE
#YU
#FRALPHA
#HMIX
#MSOFT
#TD
#TE
#TU
#MSD2
#MSE2
#MSL2
#MSQ2
#MSU2
#MASS


#newvariable="`echo "$ma2" | awk {' printf "%12.8e\n",$1 '}`" 
#echo "vamos a ver si hay suerte... $newvariable"
#newvariable=2106
#newvariable=awk {' printf "%12.4e\n",$newvariable '}
# echo "2.1061863333e+03" | awk {' printf "%12.2f\n",$1 '}
# echo "2106" | awk {' printf "%12.4e\n",$1 '}
#echo "5.083E-5" | awk -F"E" 'BEGIN{OFMT="%10.10f"} {print $1 * (10 ^ $2)}'  


##
## BLOCK HMIX y FRALPHA
##




